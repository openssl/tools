#!/usr/bin/env perl

use HTTP::Tiny;
use JSON::PP;
use Text::Wrap;

# OpenSSL project number
my $proj = 2;
my $num;


my $desc;
my $user;

my $state = "opened";
my $text  = 0;
my $fetch = 0;
my @matches;

# Gitlab token
my $token;

foreach (@ARGV) {
    $state = "$1" if (/^--state=(.*)$/);
    $desc  = "$1" if (/^--desc=(.*)$/);
    $token = "$1" if (/^--token=(.*)$/);
    $user  = "$1" if (/^--user=(.*)$/);
    $num   = $_   if (/^\d+$/);
    $text  = 1    if (/^--text$/);
    $fetch = 1    if (/^--fetch$/);
    $fetch = 2    if (/^--checkout$/);
}

if ( !defined $token && -f "$ENV{HOME}/.gitlabtoken" ) {
    open( IN, "$ENV{HOME}/.gitlabtoken" );
    $token = <IN>;
    chomp $token;
    close IN;
}

if ( !defined $token ) {
    print STDERR "Gitlab token not defined!\n";
    exit 1;
}


# Page number for gitlab query
my $pnum = 1;

while (1) {
    my $response = HTTP::Tiny->new->get(
"https://gitlab.openssl.org/api/v3/projects/$proj/merge_requests/?state=$state;per_page=100;page=$pnum;private_token=$token"
    );
    if ( !$response->{success} ) {
        print "Failed: $response->{status}, $response->{reason}\n";
        exit 1;
    }
    my $resp = decode_json $response->{content};
    last if @$resp == 0;

    foreach (@$resp) {
        next if ( defined $num && $_->{iid} ne $num );
        next if ( defined $desc && $_->{description} !~ /$desc/ );
        next if ( defined $user && $_->{author}->{username} ne $user );
        push @matches, $_;
    }
    $pnum++;
}

if ( @matches == 0 ) {
    print "ERROR: no matching requests found\n";
    exit 1;
}
if ( $fetch && @matches != 1 ) {
    print "ERROR: multiple matching requests\n";
    exit 1;
}

foreach (@matches) {
    print_req( $_, $text );
    if ($fetch) {
        my $br   = $_->{source_branch};
        my $user = $_->{author}->{username};
        system(
            "git fetch git\@gitlab.openssl.org:$user/openssl.git $br:$br"
        );
        system("git checkout $br") if $fetch == 2;
    }
}

sub print_req {
    my ( $req, $all ) = @_;

    print "Merge request: $req->{iid}, author: $req->{author}->{username},";
    print " state: $req->{state}\n";

    #print " branch: $req->{source_branch}\n";
    print "    Title: $req->{title}\n";
    if ( $all != 0 ) {
        print "Description:\n";

        # Note: using tabs here causes a failure
        print fill( "    ", "    ", $req->{description} ) . "\n";
    }
    print "\n";
}
