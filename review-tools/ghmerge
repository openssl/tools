#! /bin/bash

set -o errexit

WHAT=openssl
BUILD=yes
INTERACTIVE=yes
AUTOSQUASH="--autosquash"
[ -z ${CC+x} ] && CC="ccache gcc" # the default otherwise is "ccache clang-3.6"
REMOTE=`git remote -v | awk '/git.openssl.org.*(push)/{ print $1; }' | head -n 1`
if [ "$REMOTE" = "" ] ; then
    echo Cannot find remote git.openssl.org
    exit 1
fi

if [ ! -d .git ] ; then
    echo Not at top-level
    exit 1
fi

ADDREVOPTS=""
# Parse JCL.
while true ; do
    case "$1" in
    --tools)
        WHAT=tools ; BUILD=no ; shift
        ;;
    --web)
        WHAT=web ; BUILD=no ; shift
        ;;
    --noautosquash)
        AUTOSQUASH="" ; shift
        ;;
    --squash)
        INTERACTIVE=no ; shift
        ;;
    --nobuild)
        BUILD=no ; shift
        ;;
    --remote)
        if [ $# -lt 2 ] ; then
            echo "Missing argument of '$1'"
            exit 1
        fi
        shift; REMOTE=$1; shift
        ;;
    --)
        shift
        break
        ;;
    -*) # e.g., --verbose, --trivial, --myemail=...
        ADDREVOPTS="$ADDREVOPTS $1"
        shift
        break
        ;;
    *)
        break
        ;;
    esac
done

if [ $# -lt 2 ] ; then
    echo "Usage: $0 [flags, including addrev flags] prnum reviewer..."
    exit 1
fi
PRNUM=$1 ; shift
TEAM=$*

PR_URL=https://api.github.com/repos/openssl/$WHAT/pulls/$PRNUM
if ! wget --quiet $PR_URL -O /tmp/gh$$; then
    echo "Error getting $PR_URL"
    exit 1
fi
set -- `python -c '
from __future__ import print_function
import json, sys;
input = json.load(sys.stdin)
print(str(input["head"]["label"]).replace(":", " "),
      str(input["head"]["repo"]["ssh_url"]))'        </tmp/gh$$`
WHO=$1
BRANCH=$2
REPO=$3
rm /tmp/gh$$

if [ -z "$WHO" -o -z "$BRANCH" ]; then
    echo "Don't know from which branch to fetch"
    exit 1
fi

REL=`git rev-parse --abbrev-ref HEAD`
WORK="${WHO}-${BRANCH}"
PREV=

echo -n "Press Enter to pull the latest branch '$REL' from $REMOTE: "; read foo
git pull $REMOTE $REL

function cleanup {
    if [ "$WORK" != "$REL" ]; then
        git checkout -q $REL
        git branch -D $WORK
        git reset --hard $REMOTE/$REL # prune any leftover commits added locally
    fi
}
trap 'cleanup' EXIT

git checkout -b $WORK $REL

# append new commits from $REPO/$BRANCH
git pull --rebase $REPO $BRANCH
echo rebasing $BRANCH on $REL
git rebase $REL || (git rebase --abort; exit 1)

echo Diff against $REL
git diff $REL

if [ "$INTERACTIVE" == "yes" ] ; then
    echo -n "Press Enter to interactively rebase $AUTOSQUASH $BRANCH on $REL: "; read foo
    git rebase -i $AUTOSQUASH $REL || (git rebase --abort; exit 1)
    addrev $ADDREVOPTS --prnum=$PRNUM $TEAM ${REL}..
fi

echo Log since $REL
git log $REL..

git checkout $REL
if [ "$INTERACTIVE" != "yes" ] ; then
    echo -n "Press Enter to non-interactively merge --squash $BRANCH to $REL: "; read foo
    git merge --ff-only --no-commit --squash $WORK
    AUTHOR=`git show --no-patch --pretty="format:%an <%ae>" $WORK`
    git commit --author="$AUTHOR"
    addrev $ADDREVOPTS --prnum=$PRNUM $TEAM $REMOTE/${REL}..
else
    # echo -n "Press Enter to merge to $REL: "; read foo
    git merge --ff-only $WORK
fi

echo New log since $REMOTE/$REL
git log $REMOTE/$REL..

if [ "$BUILD" == "yes" ] ; then
    echo Rebuilding...
    ( CC="$CC" opensslbuild 2>&1 ) | tail -3
fi

while true ; do
    echo -n "Enter 'yes' to push to $REMOTE/$REL or 'no' to abort: "
    read x
    x="`echo $x | tr A-Z a-z`"
    if [ "$x" = "y" -o "$x" = "yes" -o "$x" = "n" -o "$x" = "no" ] ; then
        break
    fi
done

if [ "$x" = "y" -o "$x" = "yes" ] ; then
    git push -v $REMOTE $REL
fi
